#!/usr/bin/env bash

#/ Usage: wallpaper COMMAND
#/
#/ Unsplash wallpaper management tool.
#/
#/ Available commands:
#/   * set PATH - set wallpaper from PATH
#/   * fetch URL - download image from URL and set it as a wallpaper
#/   * change - draw new wallpaper from unsplash.com
#/   * block - add current wallpaper to blacklist and immediately draw new wallpaper
#/   * save - save wallpaper to favourites
#/   * default - set current wallpaper to default
#/   * help - display this help

set -euo pipefail
IFS=$'\n\t'

export DISPLAY=:0
RESOLUTION=$(xdpyinfo | awk '/dimensions/{print $2}')
DIR=~/.wallpapers

usage() { grep '^#/' "$0" | cut -c4- ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }


cleanup() {
   # Remove temporary files
   # Restart services
   # ...
   exit
}

check-wallpaper-in-blacklist() {
   hash=$(cat "$DIR/wallpaper" | md5sum | cut -d ' ' -f1)
   
   if cat "$DIR/blacklist" | grep "$hash" ; then
      info "Wallpaper from blacklist has been drawn. Redrawing new wallpaper..."
      change-wallpaper
   fi
}

change-wallpaper() {
   info "Fetching wallpaper..."
   if wget "https://source.unsplash.com/random/${RESOLUTION}" --no-check-certificate -o /dev/null -O "$DIR/wallpaper.new" &> /dev/null ; then
      rm "$DIR/wallpaper" &> /dev/null
      mv "$DIR/wallpaper.new" "$DIR/wallpaper"
      check-wallpaper-in-blacklist
      update-wallpaper
   else 
      set-default
   fi
}

block-wallpaper() {
   echo "# $(date)" >> "$DIR/blacklist"
   md5sum "$DIR/wallpaper" >> "$DIR/blacklist"
   info "Current wallpaper has been add to blacklist"
   change-wallpaper
}

save-wallpaper() {
   mkdir -p "$DIR/favourites"
   DEST="$DIR/favourites/$(cat "$DIR/wallpaper" | md5sum | cut -d ' ' -f1)"
   cp "$DIR/wallpaper" "$DEST"
   info "Wallpaper saved as $DEST"
}

set-default() {
   cp "$DIR/default" "$DIR/wallpaper"
   update-wallpaper
   info "Wallpaper set to default"
}

set-custom-wallpaper() {
   if [[ ! "$#" -eq 1 ]] ; then usage; fi
   file="$1"

   [[ -f "$file" ]] || fatal "File '$file' does not exist"

   cp "$file" "$DIR/wallpaper"
   update-wallpaper
}

fetch-custom-wallpaper() {   
   if [[ ! "$#" -eq 1 ]] ; then usage; fi
   url="$1"

   info "Fetching wallpaper..."
   if wget "$url" --no-check-certificate -o /dev/null -O "$DIR/wallpaper.new" &> /dev/null ; then      
      rm "$DIR/wallpaper" &> /dev/null || true
      mv "$DIR/wallpaper.new" "$DIR/wallpaper"
      update-wallpaper
   else 
      fatal "Cannot fetch wallpaper from $url"
   fi
}

update-wallpaper() {
{% if yadm.class == "i3" %}
   update-wallpaper-i3 "$@"
   exit
{% endif %}

   fatal "Unsupported DE"
}

update-wallpaper-i3() {
   info "Cleaning cache..."
   "$HOME/.local/bin/wal" -c
   info "Updating wallpaper..."
   DISPLAY=:0.0 "$HOME/.local/bin/wal" -i "$DIR/wallpaper"
   ln -s "$HOME/.cache/wal/colors.Xresources" "$HOME/.Xresources" 2> /dev/null || true
   info "Updating lock screen wallpaper..."
   betterlockscreen -u "$DIR/wallpaper"
   info "Wallpapers updated"
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
   trap cleanup EXIT

   cmd=${1:-"help"}
   shift
   mkdir -p "$DIR"
   case $cmd in
      change) change-wallpaper ;;
      block) block-wallpaper ;;
      save) save-wallpaper ;;
      set) set-custom-wallpaper "$@" ;;
      fetch) fetch-custom-wallpaper "$@" ;;
      default) set-default ;;
      help) usage ;;
      *) usage ;;
   esac
fi

